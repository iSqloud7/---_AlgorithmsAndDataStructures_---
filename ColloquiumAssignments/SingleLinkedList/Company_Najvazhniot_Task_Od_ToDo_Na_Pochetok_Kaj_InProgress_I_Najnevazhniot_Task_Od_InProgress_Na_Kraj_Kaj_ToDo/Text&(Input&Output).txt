Во рамки на една компанија се користи систем за управување со таскови на вработените.
За секој таск се чува податок за таскот (int id), времетраење – број на работни часови (int hours).
Приоритет е вредност во ранг од [1,10], каде што приоритет 10 е највисок приоритет.
Еден вработен има повеќе доделени таскови кои се чуваат во две еднострано поврзани листи.
Во првата листа се чуваат тасковите кои се незавршени (To Do листа),
а во втората листа се чуваат тасковите кои ги работи во моментот (In Progress листа).
За секој од тасковите може да се пресмета неговата важност, како двоен производ на бројот на работни часови и приоритетот на таскот.
Importance = 2* hours * priority.
Ваша задача е да се отстрани најважниот таск од To Do листата и истиот да се стави на почеток на In Progress листата.
Потоа, треба да се отстрани таскот со најмала важност од In Progress листата и истиот да се стави на крај на To Do листата.
Влез: Во првиот ред е даден бројот на таскови од To Do листата.
Во вториот ред е даден бројот на таскови од In Progress листата.
Во секој следен ред се дадени податоци за еден таск, одделени со празно место, во формат id, hours, priority.
При што први се податоците од To Do листата, а после следат In Progress.
Излез: Во првиот ред id на сите таскови од To Do листата.
Во вториот ред id на сите таскови од In Progress листата.
Треба да се менува само во рамки на void work(SLL<Task>toDo,SLL<Task>inProgress).
При тоа бришењето треба да биде имлементирано како бришење на цел јазол,
а додавањето како додавање на цел јазол.
Промените (бришење/додавање) не треба да се однесуваат на информациите на самите јазли туку во промени на врските меѓу јазлите.
Не смее да се менува main функцијата!

Input:
2
2
182 10 8
151 9 4
156 2 2
163 7 3

Output:
151 156
182 163

Input:
5
5
590 7 6
517 3 1
551 11 9
297 6 3
166 12 2
121 1 5
178 5 8
524 10 10
112 2 7
137 8 4

Output:
590 517 297 166 121
551 178 524 112 137
