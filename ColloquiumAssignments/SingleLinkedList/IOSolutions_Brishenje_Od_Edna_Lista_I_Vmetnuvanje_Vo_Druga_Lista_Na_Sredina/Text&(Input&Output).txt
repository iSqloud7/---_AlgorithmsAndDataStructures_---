Податоци за вработените во компанијата IOSolutions се чуваат во две еднострано поврзани листи.
Во првата листа се чуваат податоците за вработените кои се дел од тимот Dev,
а додека пак во втората се чуваат податоците за вработените кои се дел од тимот Qa. 
И кај двете листи, во секој од јазлите се чуваат број за идентификација (id) и возраста на вработениот за кој се однесува тој јазел.
Со зголемување на обемот на работа, потребно е да се зголеми бројот на членови во Dev тимот. 
За таа цел, главниот менаџер решил да го отстрани најмладиот член од Qa тимот и да го додаде кон Dev тимот. 
Тоа значи дека потребно е од листата каде се чуваат членовите на Qa тимот да се отстрани (избрише) најмладиот член
(доколку има повеќе, последниот таков член), и истиот да се додаде на средина на листата каде што се чуваат членовите на Dev тимот.
Влез:
Во првиот ред е даден бројот на вработени кои се дел од Dev тимот. Во вториот ред е даден бројот на вработени кои се дел од Qa тимот. 
Во следните редови се дадени паровите податоци за секој вработен, одделени со празно место, во формат id возраст.
Излез:
Во првиот ред id на сите вработени кои се дел од Dev тимот. Во вториот ред id на сите вработени кои се дел од Qa тимот.
Забелешка:
Даден е целосниот код на структурата која што треба да се користи. 
Потребно е да направат дополнувања во main функцијата и да се имплементирана void alterTeams(SLL devTeam, SLL qaTeam) функцијата. 
Притоа, бришењето треба да биде имплементирано како бришење на цел јазел, а додавањето како додавање на цел јазел. 
Промените (бришење/додавање елемент) не треба да се однесуваат на информациите во самите јазли туку во промени на врските помеѓу јазлите.

Input:
5
3
12300 34
13000 45
19002 56
18907 23
17900 45
15690 22
13989 24
12111 25

Output:
12300 13000 19002 15690 18907 17900
13989 12111
